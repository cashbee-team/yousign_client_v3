=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

The version of the OpenAPI document: 3.0
Contact: contact@yousign.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module YousignClientV3
  class DocumentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a Document
    # Deletes a given Document from a Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param document_id [String] Document Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_signature_requests_signature_request_id_documents_document_id(signature_request_id, document_id, opts = {})
      delete_signature_requests_signature_request_id_documents_document_id_with_http_info(signature_request_id, document_id, opts)
      nil
    end

    # Delete a Document
    # Deletes a given Document from a Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param document_id [String] Document Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_signature_requests_signature_request_id_documents_document_id_with_http_info(signature_request_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.delete_signature_requests_signature_request_id_documents_document_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.delete_signature_requests_signature_request_id_documents_document_id"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentApi.delete_signature_requests_signature_request_id_documents_document_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents/{documentId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentApi.delete_signature_requests_signature_request_id_documents_document_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#delete_signature_requests_signature_request_id_documents_document_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Signature Request's Documents
    # Returns a list of Documents for a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nature Filter by nature
    # @return [Array<Document>]
    def get_signature_requests_signature_request_id_documents(signature_request_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_documents_with_http_info(signature_request_id, opts)
      data
    end

    # List Signature Request&#39;s Documents
    # Returns a list of Documents for a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nature Filter by nature
    # @return [Array<(Array<Document>, Integer, Hash)>] Array<Document> data, response status code and response headers
    def get_signature_requests_signature_request_id_documents_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.get_signature_requests_signature_request_id_documents ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.get_signature_requests_signature_request_id_documents"
      end
      allowable_values = ["attachment", "signable_document"]
      if @api_client.config.client_side_validation && opts[:'nature'] && !allowable_values.include?(opts[:'nature'])
        fail ArgumentError, "invalid value for \"nature\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nature'] = opts[:'nature'] if !opts[:'nature'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Document>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentApi.get_signature_requests_signature_request_id_documents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#get_signature_requests_signature_request_id_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Document
    # Retrieves a given Document.
    # @param signature_request_id [String] Signature Request Id
    # @param document_id [String] Document Id
    # @param [Hash] opts the optional parameters
    # @return [Document]
    def get_signature_requests_signature_request_id_documents_document_id(signature_request_id, document_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_documents_document_id_with_http_info(signature_request_id, document_id, opts)
      data
    end

    # Get a Document
    # Retrieves a given Document.
    # @param signature_request_id [String] Signature Request Id
    # @param document_id [String] Document Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def get_signature_requests_signature_request_id_documents_document_id_with_http_info(signature_request_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.get_signature_requests_signature_request_id_documents_document_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.get_signature_requests_signature_request_id_documents_document_id"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentApi.get_signature_requests_signature_request_id_documents_document_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents/{documentId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Document'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentApi.get_signature_requests_signature_request_id_documents_document_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#get_signature_requests_signature_request_id_documents_document_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download a single Signature Request's Document
    # Downloads the PDF version of a given Document.
    # @param signature_request_id [String] Signature Request Id
    # @param document_id [String] Document Id
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_signature_requests_signature_request_id_documents_documents_id_download(signature_request_id, document_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_documents_documents_id_download_with_http_info(signature_request_id, document_id, opts)
      data
    end

    # Download a single Signature Request&#39;s Document
    # Downloads the PDF version of a given Document.
    # @param signature_request_id [String] Signature Request Id
    # @param document_id [String] Document Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_signature_requests_signature_request_id_documents_documents_id_download_with_http_info(signature_request_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.get_signature_requests_signature_request_id_documents_documents_id_download ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.get_signature_requests_signature_request_id_documents_documents_id_download"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentApi.get_signature_requests_signature_request_id_documents_documents_id_download"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents/{documentId}/download'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf', 'application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentApi.get_signature_requests_signature_request_id_documents_documents_id_download",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#get_signature_requests_signature_request_id_documents_documents_id_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Signature Request's Documents
    # Downloads the PDF version of all Documents attached to a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Specify Documents version to download, &#x60;completed&#x60; is only available when the Signature Request status is &#x60;done&#x60;.
    # @option opts [Boolean] :archive Force zip archive download
    # @return [File]
    def get_signature_requests_signature_request_id_documents_download(signature_request_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_documents_download_with_http_info(signature_request_id, opts)
      data
    end

    # Download Signature Request&#39;s Documents
    # Downloads the PDF version of all Documents attached to a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :version Specify Documents version to download, &#x60;completed&#x60; is only available when the Signature Request status is &#x60;done&#x60;.
    # @option opts [Boolean] :archive Force zip archive download
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_signature_requests_signature_request_id_documents_download_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.get_signature_requests_signature_request_id_documents_download ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.get_signature_requests_signature_request_id_documents_download"
      end
      allowable_values = ["current", "completed"]
      if @api_client.config.client_side_validation && opts[:'version'] && !allowable_values.include?(opts[:'version'])
        fail ArgumentError, "invalid value for \"version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents/download'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'archive'] = opts[:'archive'] if !opts[:'archive'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip, application/pdf', 'application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentApi.get_signature_requests_signature_request_id_documents_download",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#get_signature_requests_signature_request_id_documents_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Document
    # Updates a given Document. Any parameters not provided are left unchanged.
    # @param signature_request_id [String] Signature Request Id
    # @param document_id [String] Document Id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateDocument] :update_document 
    # @return [Document]
    def patch_signature_requests_signature_request_id_documents_document_id(signature_request_id, document_id, opts = {})
      data, _status_code, _headers = patch_signature_requests_signature_request_id_documents_document_id_with_http_info(signature_request_id, document_id, opts)
      data
    end

    # Update a Document
    # Updates a given Document. Any parameters not provided are left unchanged.
    # @param signature_request_id [String] Signature Request Id
    # @param document_id [String] Document Id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateDocument] :update_document 
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def patch_signature_requests_signature_request_id_documents_document_id_with_http_info(signature_request_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.patch_signature_requests_signature_request_id_documents_document_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.patch_signature_requests_signature_request_id_documents_document_id"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentApi.patch_signature_requests_signature_request_id_documents_document_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents/{documentId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_document'])

      # return_type
      return_type = opts[:debug_return_type] || 'Document'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentApi.patch_signature_requests_signature_request_id_documents_document_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#patch_signature_requests_signature_request_id_documents_document_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Document to a Signature Request
    # Adds a Document to a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param file [File] Binary file
    # @param nature [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :insert_after_id Insert just after the position of the specified document id
    # @option opts [String] :password 
    # @option opts [String] :name The document name. If not set, will use the uploaded document name. This value should contain any characters except \\\&quot;\\\\\\\&quot;, \\\&quot;/\\\&quot; and can\\\\&#39;t start and finish with a space.
    # @option opts [InitialsArea] :initials 
    # @option opts [Boolean] :parse_anchors 
    # @return [Document]
    def post_signature_requests_signature_request_id_documents(signature_request_id, file, nature, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_documents_with_http_info(signature_request_id, file, nature, opts)
      data
    end

    # Add Document to a Signature Request
    # Adds a Document to a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param file [File] Binary file
    # @param nature [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :insert_after_id Insert just after the position of the specified document id
    # @option opts [String] :password 
    # @option opts [String] :name The document name. If not set, will use the uploaded document name. This value should contain any characters except \\\&quot;\\\\\\\&quot;, \\\&quot;/\\\&quot; and can\\\\&#39;t start and finish with a space.
    # @option opts [InitialsArea] :initials 
    # @option opts [Boolean] :parse_anchors 
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def post_signature_requests_signature_request_id_documents_with_http_info(signature_request_id, file, nature, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.post_signature_requests_signature_request_id_documents ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.post_signature_requests_signature_request_id_documents"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DocumentApi.post_signature_requests_signature_request_id_documents"
      end
      # verify the required parameter 'nature' is set
      if @api_client.config.client_side_validation && nature.nil?
        fail ArgumentError, "Missing the required parameter 'nature' when calling DocumentApi.post_signature_requests_signature_request_id_documents"
      end
      # verify enum value
      allowable_values = ["attachment", "signable_document"]
      if @api_client.config.client_side_validation && !allowable_values.include?(nature)
        fail ArgumentError, "invalid value for \"nature\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'name'].nil? && opts[:'name'].to_s.length > 128
        fail ArgumentError, 'invalid value for "opts[:"name"]" when calling DocumentApi.post_signature_requests_signature_request_id_documents, the character length must be smaller than or equal to 128.'
      end

      if @api_client.config.client_side_validation && !opts[:'name'].nil? && opts[:'name'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"name"]" when calling DocumentApi.post_signature_requests_signature_request_id_documents, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^(?!\s)[^\/\\]+(?<!\s)$/)
      if @api_client.config.client_side_validation && !opts[:'name'].nil? && opts[:'name'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"name\"]' when calling DocumentApi.post_signature_requests_signature_request_id_documents, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['nature'] = nature
      form_params['insert_after_id'] = opts[:'insert_after_id'] if !opts[:'insert_after_id'].nil?
      form_params['password'] = opts[:'password'] if !opts[:'password'].nil?
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['initials'] = opts[:'initials'] if !opts[:'initials'].nil?
      form_params['parse_anchors'] = opts[:'parse_anchors'] if !opts[:'parse_anchors'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Document'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentApi.post_signature_requests_signature_request_id_documents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#post_signature_requests_signature_request_id_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace a Document in a Signature Request
    # Replace the file of a given Document.
    # @param signature_request_id [String] Signature Request Id
    # @param document_id [String] Document Id
    # @param file [File] Accepted formats: PDF, DOCX, JPEG, JPG and PNG. All files are converted to PDF upon upload. If the Document nature is signable_document, only PDF or DOCX file formats are allowed. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The document name. If not set, will use the uploaded document name. This value should contain any characters except \\\&quot;\\\\\\\&quot;, \\\&quot;/\\\&quot; and can\\\\&#39;t start and finish with a space.
    # @return [Document]
    def post_signature_requests_signature_request_id_documents_document_id_replace(signature_request_id, document_id, file, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_documents_document_id_replace_with_http_info(signature_request_id, document_id, file, opts)
      data
    end

    # Replace a Document in a Signature Request
    # Replace the file of a given Document.
    # @param signature_request_id [String] Signature Request Id
    # @param document_id [String] Document Id
    # @param file [File] Accepted formats: PDF, DOCX, JPEG, JPG and PNG. All files are converted to PDF upon upload. If the Document nature is signable_document, only PDF or DOCX file formats are allowed. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The document name. If not set, will use the uploaded document name. This value should contain any characters except \\\&quot;\\\\\\\&quot;, \\\&quot;/\\\&quot; and can\\\\&#39;t start and finish with a space.
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def post_signature_requests_signature_request_id_documents_document_id_replace_with_http_info(signature_request_id, document_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.post_signature_requests_signature_request_id_documents_document_id_replace ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling DocumentApi.post_signature_requests_signature_request_id_documents_document_id_replace"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentApi.post_signature_requests_signature_request_id_documents_document_id_replace"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DocumentApi.post_signature_requests_signature_request_id_documents_document_id_replace"
      end
      if @api_client.config.client_side_validation && !opts[:'name'].nil? && opts[:'name'].to_s.length > 128
        fail ArgumentError, 'invalid value for "opts[:"name"]" when calling DocumentApi.post_signature_requests_signature_request_id_documents_document_id_replace, the character length must be smaller than or equal to 128.'
      end

      if @api_client.config.client_side_validation && !opts[:'name'].nil? && opts[:'name'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"name"]" when calling DocumentApi.post_signature_requests_signature_request_id_documents_document_id_replace, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^(?!\s)[^\/\\]+(?<!\s)$/)
      if @api_client.config.client_side_validation && !opts[:'name'].nil? && opts[:'name'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"name\"]' when calling DocumentApi.post_signature_requests_signature_request_id_documents_document_id_replace, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/documents/{documentId}/replace'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Document'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DocumentApi.post_signature_requests_signature_request_id_documents_document_id_replace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#post_signature_requests_signature_request_id_documents_document_id_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
