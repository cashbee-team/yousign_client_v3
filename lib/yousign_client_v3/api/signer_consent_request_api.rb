=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

The version of the OpenAPI document: 3.0
Contact: contact@yousign.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module YousignClientV3
  class SignerConsentRequestApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a Signer Consent Request
    # Delete a Signer Consent Request from signature request. This action is only permitted when the Signature Request is a draft.
    # @param signature_request_id [String] Signature Request Id
    # @param consent_request_id [String] Signer Consent Request Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_signature_requests_signature_request_id_consent_requests_consent_request_id(signature_request_id, consent_request_id, opts = {})
      delete_signature_requests_signature_request_id_consent_requests_consent_request_id_with_http_info(signature_request_id, consent_request_id, opts)
      nil
    end

    # Delete a Signer Consent Request
    # Delete a Signer Consent Request from signature request. This action is only permitted when the Signature Request is a draft.
    # @param signature_request_id [String] Signature Request Id
    # @param consent_request_id [String] Signer Consent Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_signature_requests_signature_request_id_consent_requests_consent_request_id_with_http_info(signature_request_id, consent_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerConsentRequestApi.delete_signature_requests_signature_request_id_consent_requests_consent_request_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerConsentRequestApi.delete_signature_requests_signature_request_id_consent_requests_consent_request_id"
      end
      # verify the required parameter 'consent_request_id' is set
      if @api_client.config.client_side_validation && consent_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_request_id' when calling SignerConsentRequestApi.delete_signature_requests_signature_request_id_consent_requests_consent_request_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/consent_requests/{consentRequestId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'consentRequestId' + '}', CGI.escape(consent_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerConsentRequestApi.delete_signature_requests_signature_request_id_consent_requests_consent_request_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerConsentRequestApi#delete_signature_requests_signature_request_id_consent_requests_consent_request_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a Signer from a given Signer Consent Request
    # Remove a Signer from a given Signer Consent Request. This action is only permitted when the Signature Request is a draft.
    # @param signature_request_id [String] Signature Request Id
    # @param consent_request_id [String] Signer Consent Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id(signature_request_id, consent_request_id, signer_id, opts = {})
      delete_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id_with_http_info(signature_request_id, consent_request_id, signer_id, opts)
      nil
    end

    # Remove a Signer from a given Signer Consent Request
    # Remove a Signer from a given Signer Consent Request. This action is only permitted when the Signature Request is a draft.
    # @param signature_request_id [String] Signature Request Id
    # @param consent_request_id [String] Signer Consent Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id_with_http_info(signature_request_id, consent_request_id, signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerConsentRequestApi.delete_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerConsentRequestApi.delete_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id"
      end
      # verify the required parameter 'consent_request_id' is set
      if @api_client.config.client_side_validation && consent_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_request_id' when calling SignerConsentRequestApi.delete_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id"
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerConsentRequestApi.delete_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/consent_requests/{consentRequestId}/signers/{signerId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'consentRequestId' + '}', CGI.escape(consent_request_id.to_s)).sub('{' + 'signerId' + '}', CGI.escape(signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerConsentRequestApi.delete_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerConsentRequestApi#delete_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Signer Consent Requests of the Signature Request
    # Returns a list of Signer Consent Requests for a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [GetSignatureRequestsSignatureRequestIdSignerConsentRequests200Response]
    def get_signature_requests_signature_request_id_signer_consent_requests(signature_request_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_signer_consent_requests_with_http_info(signature_request_id, opts)
      data
    end

    # List Signer Consent Requests of the Signature Request
    # Returns a list of Signer Consent Requests for a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSignatureRequestsSignatureRequestIdSignerConsentRequests200Response, Integer, Hash)>] GetSignatureRequestsSignatureRequestIdSignerConsentRequests200Response data, response status code and response headers
    def get_signature_requests_signature_request_id_signer_consent_requests_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerConsentRequestApi.get_signature_requests_signature_request_id_signer_consent_requests ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerConsentRequestApi.get_signature_requests_signature_request_id_signer_consent_requests"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/consent_requests'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSignatureRequestsSignatureRequestIdSignerConsentRequests200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerConsentRequestApi.get_signature_requests_signature_request_id_signer_consent_requests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerConsentRequestApi#get_signature_requests_signature_request_id_signer_consent_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Signer Consent Request
    # Updates a given Signer Consent Request. Any parameters not provided are left unchanged. This action is only permitted when the Signature Request is a draft. 
    # @param signature_request_id [String] Signature Request Id
    # @param consent_request_id [String] Signer Consent Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSignerConsentRequest] :update_signer_consent_request 
    # @return [SignerConsentRequest]
    def patch_signature_requests_signature_request_id_consent_requests_consent_request_id(signature_request_id, consent_request_id, opts = {})
      data, _status_code, _headers = patch_signature_requests_signature_request_id_consent_requests_consent_request_id_with_http_info(signature_request_id, consent_request_id, opts)
      data
    end

    # Update a Signer Consent Request
    # Updates a given Signer Consent Request. Any parameters not provided are left unchanged. This action is only permitted when the Signature Request is a draft. 
    # @param signature_request_id [String] Signature Request Id
    # @param consent_request_id [String] Signer Consent Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSignerConsentRequest] :update_signer_consent_request 
    # @return [Array<(SignerConsentRequest, Integer, Hash)>] SignerConsentRequest data, response status code and response headers
    def patch_signature_requests_signature_request_id_consent_requests_consent_request_id_with_http_info(signature_request_id, consent_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerConsentRequestApi.patch_signature_requests_signature_request_id_consent_requests_consent_request_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerConsentRequestApi.patch_signature_requests_signature_request_id_consent_requests_consent_request_id"
      end
      # verify the required parameter 'consent_request_id' is set
      if @api_client.config.client_side_validation && consent_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_request_id' when calling SignerConsentRequestApi.patch_signature_requests_signature_request_id_consent_requests_consent_request_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/consent_requests/{consentRequestId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'consentRequestId' + '}', CGI.escape(consent_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_signer_consent_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SignerConsentRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerConsentRequestApi.patch_signature_requests_signature_request_id_consent_requests_consent_request_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerConsentRequestApi#patch_signature_requests_signature_request_id_consent_requests_consent_request_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Signer Consent Request to a Signature Request
    # Adds a Signer Consent Request to a given Signature Request. This action is only permitted when the Signature Request is a draft.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSignerConsentRequest] :create_signer_consent_request 
    # @return [SignerConsentRequest]
    def post_signature_requests_signature_request_id_consent_requests(signature_request_id, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_consent_requests_with_http_info(signature_request_id, opts)
      data
    end

    # Add Signer Consent Request to a Signature Request
    # Adds a Signer Consent Request to a given Signature Request. This action is only permitted when the Signature Request is a draft.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSignerConsentRequest] :create_signer_consent_request 
    # @return [Array<(SignerConsentRequest, Integer, Hash)>] SignerConsentRequest data, response status code and response headers
    def post_signature_requests_signature_request_id_consent_requests_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerConsentRequestApi.post_signature_requests_signature_request_id_consent_requests ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerConsentRequestApi.post_signature_requests_signature_request_id_consent_requests"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/consent_requests'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_signer_consent_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SignerConsentRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerConsentRequestApi.post_signature_requests_signature_request_id_consent_requests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerConsentRequestApi#post_signature_requests_signature_request_id_consent_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds a Signer to a given Signer Consent Request
    # Adds a Signer to a given Signer Consent Request. This action is only permitted when the Signature Request is a draft.
    # @param signature_request_id [String] Signature Request Id
    # @param consent_request_id [String] Signer Consent Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id(signature_request_id, consent_request_id, signer_id, opts = {})
      put_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id_with_http_info(signature_request_id, consent_request_id, signer_id, opts)
      nil
    end

    # Adds a Signer to a given Signer Consent Request
    # Adds a Signer to a given Signer Consent Request. This action is only permitted when the Signature Request is a draft.
    # @param signature_request_id [String] Signature Request Id
    # @param consent_request_id [String] Signer Consent Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def put_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id_with_http_info(signature_request_id, consent_request_id, signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerConsentRequestApi.put_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerConsentRequestApi.put_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id"
      end
      # verify the required parameter 'consent_request_id' is set
      if @api_client.config.client_side_validation && consent_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_request_id' when calling SignerConsentRequestApi.put_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id"
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerConsentRequestApi.put_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/consent_requests/{consentRequestId}/signers/{signerId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'consentRequestId' + '}', CGI.escape(consent_request_id.to_s)).sub('{' + 'signerId' + '}', CGI.escape(signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerConsentRequestApi.put_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerConsentRequestApi#put_signature_requests_signature_request_id_consent_requests_consent_request_id_signers_signer_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
