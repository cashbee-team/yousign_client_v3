=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

The version of the OpenAPI document: 3.0
Contact: contact@yousign.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module YousignClientV3
  class IDDocumentVerificationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Initiate a new ID document verification
    # Verify a person’s ID document by sending the file containing their ID document (ID card, passport, residence permit or driving license).
    # @param first_name [String] Please provide the holder first name, exactly as it appears on the ID document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name 
    # @param last_name [String] Please provide the holder last name, exactly as it appears on the ID document birth name. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name 
    # @param file [File] Binary file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :document_type The document type to verify
    # @option opts [File] :additional_file Binary file
    # @return [IdDocumentVerificationCreated]
    def create_id_document_verification(first_name, last_name, file, opts = {})
      data, _status_code, _headers = create_id_document_verification_with_http_info(first_name, last_name, file, opts)
      data
    end

    # Initiate a new ID document verification
    # Verify a person’s ID document by sending the file containing their ID document (ID card, passport, residence permit or driving license).
    # @param first_name [String] Please provide the holder first name, exactly as it appears on the ID document. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name 
    # @param last_name [String] Please provide the holder last name, exactly as it appears on the ID document birth name. Please match it exactly, with the same characters, same case. One exception: if the document mentions an honorary title, please don&#39;t provide it as part of the name 
    # @param file [File] Binary file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :document_type The document type to verify
    # @option opts [File] :additional_file Binary file
    # @return [Array<(IdDocumentVerificationCreated, Integer, Hash)>] IdDocumentVerificationCreated data, response status code and response headers
    def create_id_document_verification_with_http_info(first_name, last_name, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IDDocumentVerificationApi.create_id_document_verification ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling IDDocumentVerificationApi.create_id_document_verification"
      end
      if @api_client.config.client_side_validation && first_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "first_name" when calling IDDocumentVerificationApi.create_id_document_verification, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && first_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "first_name" when calling IDDocumentVerificationApi.create_id_document_verification, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^(?!\s)[0-9A-Za-zĄÀÁÂÃÄÅÇĆÈÉÊËĘÌÍÎÏŁÑŃÒÓÔÕÖŚÙÚÛÜÝŹŻąàáâãäåæçćèéêëęìíîïłñńòóôõöśùúûüýÿźżßĀāĂăĈĉĊċČčĎďĐđĒēĔĕĖėĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŽžſøØÆœ`\'()\- ]+(?<!\s)$/)
      if @api_client.config.client_side_validation && first_name !~ pattern
        fail ArgumentError, "invalid value for 'first_name' when calling IDDocumentVerificationApi.create_id_document_verification, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling IDDocumentVerificationApi.create_id_document_verification"
      end
      if @api_client.config.client_side_validation && last_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "last_name" when calling IDDocumentVerificationApi.create_id_document_verification, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && last_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "last_name" when calling IDDocumentVerificationApi.create_id_document_verification, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^(?!\s)[0-9A-Za-zĄÀÁÂÃÄÅÇĆÈÉÊËĘÌÍÎÏŁÑŃÒÓÔÕÖŚÙÚÛÜÝŹŻąàáâãäåæçćèéêëęìíîïłñńòóôõöśùúûüýÿźżßĀāĂăĈĉĊċČčĎďĐđĒēĔĕĖėĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŽžſøØÆœ`\'()\- ]+(?<!\s)$/)
      if @api_client.config.client_side_validation && last_name !~ pattern
        fail ArgumentError, "invalid value for 'last_name' when calling IDDocumentVerificationApi.create_id_document_verification, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling IDDocumentVerificationApi.create_id_document_verification"
      end
      allowable_values = ["id_card", "passport", "residence_permit", "driver_license", "ita_ts_cns"]
      if @api_client.config.client_side_validation && opts[:'document_type'] && !allowable_values.include?(opts[:'document_type'])
        fail ArgumentError, "invalid value for \"document_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/id_document_verifications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['first_name'] = first_name
      form_params['last_name'] = last_name
      form_params['file'] = file
      form_params['document_type'] = opts[:'document_type'] if !opts[:'document_type'].nil?
      form_params['additional_file'] = opts[:'additional_file'] if !opts[:'additional_file'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IdDocumentVerificationCreated'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"IDDocumentVerificationApi.create_id_document_verification",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IDDocumentVerificationApi#create_id_document_verification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an ID document verification
    # Get the detailed results of an ID document verification, including the status of the verification, the reasons in case of rejection and the data extracted from the ID document.
    # @param id_document_verification_id [String] The ID document verification ID
    # @param [Hash] opts the optional parameters
    # @return [GetIdDocumentVerification200Response]
    def get_id_document_verification(id_document_verification_id, opts = {})
      data, _status_code, _headers = get_id_document_verification_with_http_info(id_document_verification_id, opts)
      data
    end

    # Retrieve an ID document verification
    # Get the detailed results of an ID document verification, including the status of the verification, the reasons in case of rejection and the data extracted from the ID document.
    # @param id_document_verification_id [String] The ID document verification ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetIdDocumentVerification200Response, Integer, Hash)>] GetIdDocumentVerification200Response data, response status code and response headers
    def get_id_document_verification_with_http_info(id_document_verification_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IDDocumentVerificationApi.get_id_document_verification ...'
      end
      # verify the required parameter 'id_document_verification_id' is set
      if @api_client.config.client_side_validation && id_document_verification_id.nil?
        fail ArgumentError, "Missing the required parameter 'id_document_verification_id' when calling IDDocumentVerificationApi.get_id_document_verification"
      end
      # resource path
      local_var_path = '/id_document_verifications/{idDocumentVerificationId}'.sub('{' + 'idDocumentVerificationId' + '}', CGI.escape(id_document_verification_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIdDocumentVerification200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"IDDocumentVerificationApi.get_id_document_verification",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IDDocumentVerificationApi#get_id_document_verification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ID Document Verifications
    # Returns the list of all ID Document Verifications within your organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after After cursor (pagination)
    # @option opts [Integer] :limit The limit of items count to retrieve. (default to 100)
    # @option opts [String] :status Filter by status
    # @return [GetIdDocumentVerifications200Response]
    def get_id_document_verifications(opts = {})
      data, _status_code, _headers = get_id_document_verifications_with_http_info(opts)
      data
    end

    # List ID Document Verifications
    # Returns the list of all ID Document Verifications within your organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after After cursor (pagination)
    # @option opts [Integer] :limit The limit of items count to retrieve. (default to 100)
    # @option opts [String] :status Filter by status
    # @return [Array<(GetIdDocumentVerifications200Response, Integer, Hash)>] GetIdDocumentVerifications200Response data, response status code and response headers
    def get_id_document_verifications_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IDDocumentVerificationApi.get_id_document_verifications ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling IDDocumentVerificationApi.get_id_document_verifications, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling IDDocumentVerificationApi.get_id_document_verifications, must be greater than or equal to 1.'
      end

      allowable_values = ["pending", "approved", "declined", "inconclusive"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/id_document_verifications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIdDocumentVerifications200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"IDDocumentVerificationApi.get_id_document_verifications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IDDocumentVerificationApi#get_id_document_verifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
