=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

The version of the OpenAPI document: 3.0
Contact: contact@yousign.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module YousignClientV3
  class ApproverApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an Approver
    # Deletes a given Approver from a Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param approver_id [String] Approver Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_signature_requests_signature_request_id_approvers_approver_id(signature_request_id, approver_id, opts = {})
      delete_signature_requests_signature_request_id_approvers_approver_id_with_http_info(signature_request_id, approver_id, opts)
      nil
    end

    # Delete an Approver
    # Deletes a given Approver from a Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param approver_id [String] Approver Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_signature_requests_signature_request_id_approvers_approver_id_with_http_info(signature_request_id, approver_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApproverApi.delete_signature_requests_signature_request_id_approvers_approver_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling ApproverApi.delete_signature_requests_signature_request_id_approvers_approver_id"
      end
      # verify the required parameter 'approver_id' is set
      if @api_client.config.client_side_validation && approver_id.nil?
        fail ArgumentError, "Missing the required parameter 'approver_id' when calling ApproverApi.delete_signature_requests_signature_request_id_approvers_approver_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/approvers/{approverId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'approverId' + '}', CGI.escape(approver_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ApproverApi.delete_signature_requests_signature_request_id_approvers_approver_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApproverApi#delete_signature_requests_signature_request_id_approvers_approver_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Approver
    # Retrieves a given Approver.
    # @param signature_request_id [String] Signature Request Id
    # @param approver_id [String] Approver Id
    # @param [Hash] opts the optional parameters
    # @return [Approver]
    def get_signature_requests_signature_request_id_approvers_approver_id(signature_request_id, approver_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_approvers_approver_id_with_http_info(signature_request_id, approver_id, opts)
      data
    end

    # Get an Approver
    # Retrieves a given Approver.
    # @param signature_request_id [String] Signature Request Id
    # @param approver_id [String] Approver Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Approver, Integer, Hash)>] Approver data, response status code and response headers
    def get_signature_requests_signature_request_id_approvers_approver_id_with_http_info(signature_request_id, approver_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApproverApi.get_signature_requests_signature_request_id_approvers_approver_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling ApproverApi.get_signature_requests_signature_request_id_approvers_approver_id"
      end
      # verify the required parameter 'approver_id' is set
      if @api_client.config.client_side_validation && approver_id.nil?
        fail ArgumentError, "Missing the required parameter 'approver_id' when calling ApproverApi.get_signature_requests_signature_request_id_approvers_approver_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/approvers/{approverId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'approverId' + '}', CGI.escape(approver_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Approver'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ApproverApi.get_signature_requests_signature_request_id_approvers_approver_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApproverApi#get_signature_requests_signature_request_id_approvers_approver_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Approver
    # Updates a given Approver. Any parameters not provided are left unchanged.
    # @param signature_request_id [String] Signature Request Id
    # @param approver_id [String] Approver Id
    # @param [Hash] opts the optional parameters
    # @option opts [PatchSignatureRequestsSignatureRequestIdApproversApproverIdRequest] :patch_signature_requests_signature_request_id_approvers_approver_id_request 
    # @return [Approver]
    def patch_signature_requests_signature_request_id_approvers_approver_id(signature_request_id, approver_id, opts = {})
      data, _status_code, _headers = patch_signature_requests_signature_request_id_approvers_approver_id_with_http_info(signature_request_id, approver_id, opts)
      data
    end

    # Update an Approver
    # Updates a given Approver. Any parameters not provided are left unchanged.
    # @param signature_request_id [String] Signature Request Id
    # @param approver_id [String] Approver Id
    # @param [Hash] opts the optional parameters
    # @option opts [PatchSignatureRequestsSignatureRequestIdApproversApproverIdRequest] :patch_signature_requests_signature_request_id_approvers_approver_id_request 
    # @return [Array<(Approver, Integer, Hash)>] Approver data, response status code and response headers
    def patch_signature_requests_signature_request_id_approvers_approver_id_with_http_info(signature_request_id, approver_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApproverApi.patch_signature_requests_signature_request_id_approvers_approver_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling ApproverApi.patch_signature_requests_signature_request_id_approvers_approver_id"
      end
      # verify the required parameter 'approver_id' is set
      if @api_client.config.client_side_validation && approver_id.nil?
        fail ArgumentError, "Missing the required parameter 'approver_id' when calling ApproverApi.patch_signature_requests_signature_request_id_approvers_approver_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/approvers/{approverId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'approverId' + '}', CGI.escape(approver_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_signature_requests_signature_request_id_approvers_approver_id_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Approver'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ApproverApi.patch_signature_requests_signature_request_id_approvers_approver_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApproverApi#patch_signature_requests_signature_request_id_approvers_approver_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Approver
    # Adds an Approver to a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [PostSignatureRequestsSignatureRequestIdApproversRequest] :post_signature_requests_signature_request_id_approvers_request An Approver object to be added to the Signature Request.
    # @return [Approver]
    def post_signature_requests_signature_request_id_approvers(signature_request_id, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_approvers_with_http_info(signature_request_id, opts)
      data
    end

    # Create a new Approver
    # Adds an Approver to a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [PostSignatureRequestsSignatureRequestIdApproversRequest] :post_signature_requests_signature_request_id_approvers_request An Approver object to be added to the Signature Request.
    # @return [Array<(Approver, Integer, Hash)>] Approver data, response status code and response headers
    def post_signature_requests_signature_request_id_approvers_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApproverApi.post_signature_requests_signature_request_id_approvers ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling ApproverApi.post_signature_requests_signature_request_id_approvers"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/approvers'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_signature_requests_signature_request_id_approvers_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Approver'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ApproverApi.post_signature_requests_signature_request_id_approvers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApproverApi#post_signature_requests_signature_request_id_approvers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send manual reminder to an Approver
    # Sends a reminder to a given Approver to review their Signature Request. Only possible when the Signature Request status is `approval` and the Approver status is `notified`. 
    # @param signature_request_id [String] Signature Request Id
    # @param approver_id [String] Approver Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_signature_requests_signature_request_id_approvers_approver_id_send_reminder(signature_request_id, approver_id, opts = {})
      post_signature_requests_signature_request_id_approvers_approver_id_send_reminder_with_http_info(signature_request_id, approver_id, opts)
      nil
    end

    # Send manual reminder to an Approver
    # Sends a reminder to a given Approver to review their Signature Request. Only possible when the Signature Request status is &#x60;approval&#x60; and the Approver status is &#x60;notified&#x60;. 
    # @param signature_request_id [String] Signature Request Id
    # @param approver_id [String] Approver Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_signature_requests_signature_request_id_approvers_approver_id_send_reminder_with_http_info(signature_request_id, approver_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApproverApi.post_signature_requests_signature_request_id_approvers_approver_id_send_reminder ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling ApproverApi.post_signature_requests_signature_request_id_approvers_approver_id_send_reminder"
      end
      # verify the required parameter 'approver_id' is set
      if @api_client.config.client_side_validation && approver_id.nil?
        fail ArgumentError, "Missing the required parameter 'approver_id' when calling ApproverApi.post_signature_requests_signature_request_id_approvers_approver_id_send_reminder"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/approvers/{approverId}/send_reminder'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'approverId' + '}', CGI.escape(approver_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ApproverApi.post_signature_requests_signature_request_id_approvers_approver_id_send_reminder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApproverApi#post_signature_requests_signature_request_id_approvers_approver_id_send_reminder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
