=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

The version of the OpenAPI document: 3.0
Contact: contact@yousign.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module YousignClientV3
  class ArchiveApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Download archived file
    # Download the archived file using the ArchivedFileId.
    # @param archived_file_id [String] ArchivedFileId
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_archives_archived_file_id_download(archived_file_id, opts = {})
      data, _status_code, _headers = get_archives_archived_file_id_download_with_http_info(archived_file_id, opts)
      data
    end

    # Download archived file
    # Download the archived file using the ArchivedFileId.
    # @param archived_file_id [String] ArchivedFileId
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_archives_archived_file_id_download_with_http_info(archived_file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArchiveApi.get_archives_archived_file_id_download ...'
      end
      # verify the required parameter 'archived_file_id' is set
      if @api_client.config.client_side_validation && archived_file_id.nil?
        fail ArgumentError, "Missing the required parameter 'archived_file_id' when calling ArchiveApi.get_archives_archived_file_id_download"
      end
      # resource path
      local_var_path = '/archives/{archivedFileId}/download'.sub('{' + 'archivedFileId' + '}', CGI.escape(archived_file_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ArchiveApi.get_archives_archived_file_id_download",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArchiveApi#get_archives_archived_file_id_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Direct upload an archived file
    # Archive a file in a secure digital safe for 10 years
    # @param file [File] File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @option opts [String] :archive_y 
    # @option opts [Array<String>] :tags Tags for the file
    # @option opts [String] :expired_at Expiration date of the file
    # @return [ArchivedFile]
    def post_archives(file, opts = {})
      data, _status_code, _headers = post_archives_with_http_info(file, opts)
      data
    end

    # Direct upload an archived file
    # Archive a file in a secure digital safe for 10 years
    # @param file [File] File to be uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @option opts [String] :archive_y 
    # @option opts [Array<String>] :tags Tags for the file
    # @option opts [String] :expired_at Expiration date of the file
    # @return [Array<(ArchivedFile, Integer, Hash)>] ArchivedFile data, response status code and response headers
    def post_archives_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArchiveApi.post_archives ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling ArchiveApi.post_archives"
      end
      pattern = Regexp.new(/^(true|false)?$/)
      if @api_client.config.client_side_validation && !opts[:'archive_y'].nil? && opts[:'archive_y'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"archive_y\"]' when calling ArchiveApi.post_archives, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]) ([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/)
      if @api_client.config.client_side_validation && !opts[:'expired_at'].nil? && opts[:'expired_at'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"expired_at\"]' when calling ArchiveApi.post_archives, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/archives'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['workspace_id'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?
      form_params['archive_y'] = opts[:'archive_y'] if !opts[:'archive_y'].nil?
      form_params['tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      form_params['expired_at'] = opts[:'expired_at'] if !opts[:'expired_at'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ArchivedFile'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ArchiveApi.post_archives",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArchiveApi#post_archives\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
