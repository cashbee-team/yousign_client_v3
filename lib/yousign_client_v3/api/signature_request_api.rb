=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

The version of the OpenAPI document: 3.0
Contact: contact@yousign.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module YousignClientV3
  class SignatureRequestApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a Signature Request
    # Deletes a given Signature Request, not possible if the Signature Request is in `approval` and `ongoing` status.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :permanent_delete If true it will permanently delete the Signature Request. It will no longer be retrievable. (default to false)
    # @return [nil]
    def delete_signature_requests_signature_request_id(signature_request_id, opts = {})
      delete_signature_requests_signature_request_id_with_http_info(signature_request_id, opts)
      nil
    end

    # Delete a Signature Request
    # Deletes a given Signature Request, not possible if the Signature Request is in &#x60;approval&#x60; and &#x60;ongoing&#x60; status.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :permanent_delete If true it will permanently delete the Signature Request. It will no longer be retrievable. (default to false)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_signature_requests_signature_request_id_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.delete_signature_requests_signature_request_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignatureRequestApi.delete_signature_requests_signature_request_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'permanent_delete'] = opts[:'permanent_delete'] if !opts[:'permanent_delete'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignatureRequestApi.delete_signature_requests_signature_request_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#delete_signature_requests_signature_request_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Signature Requests
    # Returns the list of all Signatures Requests in your organization. You can limit the number of items returned by using filters and pagination. Consult our guide for more details and examples.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after After cursor (pagination)
    # @option opts [Integer] :limit The limit of items count to retrieve. (default to 100)
    # @option opts [Object] :status Filter by &#x60;status&#x60;. Allowed operators: &#x60;eq&#x60;, &#x60;in&#x60;. Example: &#x60;status[in]&#x3D;draft,done&#x60; 
    # @option opts [Object] :workspace_id Filter by &#x60;workspace_id&#x60;. Allowed operators: &#x60;eq&#x60;. Example: &#x60;workspace_id[eq]&#x3D;9b6ed2f3-244f-487a-baa1-bbe4f51c8748&#x60; 
    # @option opts [Object] :external_id Filter by &#x60;external_id&#x60;. Allowed operators: &#x60;eq&#x60;. Example: &#x60;external_id[eq]&#x3D;an-external-id&#x60; 
    # @option opts [Object] :source Filter by &#x60;source&#x60;. Allowed operators: &#x60;eq&#x60;, &#x60;in&#x60;. Example: &#x60;source[in]&#x3D;public_api,app&#x60; 
    # @option opts [String] :q Search on name
    # @return [GetSignatureRequests200Response]
    def get_signature_requests(opts = {})
      data, _status_code, _headers = get_signature_requests_with_http_info(opts)
      data
    end

    # List Signature Requests
    # Returns the list of all Signatures Requests in your organization. You can limit the number of items returned by using filters and pagination. Consult our guide for more details and examples.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after After cursor (pagination)
    # @option opts [Integer] :limit The limit of items count to retrieve. (default to 100)
    # @option opts [Object] :status Filter by &#x60;status&#x60;. Allowed operators: &#x60;eq&#x60;, &#x60;in&#x60;. Example: &#x60;status[in]&#x3D;draft,done&#x60; 
    # @option opts [Object] :workspace_id Filter by &#x60;workspace_id&#x60;. Allowed operators: &#x60;eq&#x60;. Example: &#x60;workspace_id[eq]&#x3D;9b6ed2f3-244f-487a-baa1-bbe4f51c8748&#x60; 
    # @option opts [Object] :external_id Filter by &#x60;external_id&#x60;. Allowed operators: &#x60;eq&#x60;. Example: &#x60;external_id[eq]&#x3D;an-external-id&#x60; 
    # @option opts [Object] :source Filter by &#x60;source&#x60;. Allowed operators: &#x60;eq&#x60;, &#x60;in&#x60;. Example: &#x60;source[in]&#x3D;public_api,app&#x60; 
    # @option opts [String] :q Search on name
    # @return [Array<(GetSignatureRequests200Response, Integer, Hash)>] GetSignatureRequests200Response data, response status code and response headers
    def get_signature_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.get_signature_requests ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SignatureRequestApi.get_signature_requests, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling SignatureRequestApi.get_signature_requests, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/signature_requests'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'workspace_id'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSignatureRequests200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignatureRequestApi.get_signature_requests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#get_signature_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch a Signature Request
    # Retrieves a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [SignatureRequest]
    def get_signature_requests_signature_request_id(signature_request_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_with_http_info(signature_request_id, opts)
      data
    end

    # Fetch a Signature Request
    # Retrieves a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignatureRequest, Integer, Hash)>] SignatureRequest data, response status code and response headers
    def get_signature_requests_signature_request_id_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.get_signature_requests_signature_request_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignatureRequestApi.get_signature_requests_signature_request_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SignatureRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignatureRequestApi.get_signature_requests_signature_request_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#get_signature_requests_signature_request_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Signature Request
    # Updates a given Signature Request. Any parameters not provided are left unchanged.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSignatureRequest] :update_signature_request 
    # @return [SignatureRequest]
    def patch_signature_requests_signature_request_id(signature_request_id, opts = {})
      data, _status_code, _headers = patch_signature_requests_signature_request_id_with_http_info(signature_request_id, opts)
      data
    end

    # Update a Signature Request
    # Updates a given Signature Request. Any parameters not provided are left unchanged.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSignatureRequest] :update_signature_request 
    # @return [Array<(SignatureRequest, Integer, Hash)>] SignatureRequest data, response status code and response headers
    def patch_signature_requests_signature_request_id_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.patch_signature_requests_signature_request_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignatureRequestApi.patch_signature_requests_signature_request_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_signature_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SignatureRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignatureRequestApi.patch_signature_requests_signature_request_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#patch_signature_requests_signature_request_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate a new Signature Request
    # Creates a new Signature Request resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSignatureRequest] :create_signature_request 
    # @return [SignatureRequest]
    def post_signature_requests(opts = {})
      data, _status_code, _headers = post_signature_requests_with_http_info(opts)
      data
    end

    # Initiate a new Signature Request
    # Creates a new Signature Request resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSignatureRequest] :create_signature_request 
    # @return [Array<(SignatureRequest, Integer, Hash)>] SignatureRequest data, response status code and response headers
    def post_signature_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.post_signature_requests ...'
      end
      # resource path
      local_var_path = '/signature_requests'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_signature_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SignatureRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignatureRequestApi.post_signature_requests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#post_signature_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activate a Signature Request
    # Activates a Signature request, so it is not in `draft` status anymore. If the `delivery_mode` is not `null`, activating the Signature Request will trigger the notifications to Approvers/Followers/Signers. 
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [SignatureRequestActivated]
    def post_signature_requests_signature_request_id_activate(signature_request_id, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_activate_with_http_info(signature_request_id, opts)
      data
    end

    # Activate a Signature Request
    # Activates a Signature request, so it is not in &#x60;draft&#x60; status anymore. If the &#x60;delivery_mode&#x60; is not &#x60;null&#x60;, activating the Signature Request will trigger the notifications to Approvers/Followers/Signers. 
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignatureRequestActivated, Integer, Hash)>] SignatureRequestActivated data, response status code and response headers
    def post_signature_requests_signature_request_id_activate_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.post_signature_requests_signature_request_id_activate ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignatureRequestApi.post_signature_requests_signature_request_id_activate"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/activate'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SignatureRequestActivated'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignatureRequestApi.post_signature_requests_signature_request_id_activate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#post_signature_requests_signature_request_id_activate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel a Signature Request
    # Cancels a Signature Request when it is in `approval` or `ongoing` status. A canceled Signature Request cannot be reactivated.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [PostSignatureRequestsSignatureRequestIdCancelRequest] :post_signature_requests_signature_request_id_cancel_request 
    # @return [SignatureRequest]
    def post_signature_requests_signature_request_id_cancel(signature_request_id, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_cancel_with_http_info(signature_request_id, opts)
      data
    end

    # Cancel a Signature Request
    # Cancels a Signature Request when it is in &#x60;approval&#x60; or &#x60;ongoing&#x60; status. A canceled Signature Request cannot be reactivated.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [PostSignatureRequestsSignatureRequestIdCancelRequest] :post_signature_requests_signature_request_id_cancel_request 
    # @return [Array<(SignatureRequest, Integer, Hash)>] SignatureRequest data, response status code and response headers
    def post_signature_requests_signature_request_id_cancel_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.post_signature_requests_signature_request_id_cancel ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignatureRequestApi.post_signature_requests_signature_request_id_cancel"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/cancel'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_signature_requests_signature_request_id_cancel_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SignatureRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignatureRequestApi.post_signature_requests_signature_request_id_cancel",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#post_signature_requests_signature_request_id_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reactivate an expired Signature Request
    # Reactivates a Signature Request when it is in `expired` status.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [PostSignatureRequestsSignatureRequestIdReactivateRequest] :post_signature_requests_signature_request_id_reactivate_request 
    # @return [SignatureRequest]
    def post_signature_requests_signature_request_id_reactivate(signature_request_id, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_reactivate_with_http_info(signature_request_id, opts)
      data
    end

    # Reactivate an expired Signature Request
    # Reactivates a Signature Request when it is in &#x60;expired&#x60; status.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [PostSignatureRequestsSignatureRequestIdReactivateRequest] :post_signature_requests_signature_request_id_reactivate_request 
    # @return [Array<(SignatureRequest, Integer, Hash)>] SignatureRequest data, response status code and response headers
    def post_signature_requests_signature_request_id_reactivate_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignatureRequestApi.post_signature_requests_signature_request_id_reactivate ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignatureRequestApi.post_signature_requests_signature_request_id_reactivate"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/reactivate'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'post_signature_requests_signature_request_id_reactivate_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SignatureRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignatureRequestApi.post_signature_requests_signature_request_id_reactivate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignatureRequestApi#post_signature_requests_signature_request_id_reactivate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
