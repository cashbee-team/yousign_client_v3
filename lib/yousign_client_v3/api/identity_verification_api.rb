=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

The version of the OpenAPI document: 3.0
Contact: contact@yousign.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module YousignClientV3
  class IdentityVerificationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List Identity Verifications
    # Returns the list of all Identity Verifications within your organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after After cursor (pagination)
    # @option opts [Integer] :limit The limit of items count to retrieve. (default to 100)
    # @option opts [String] :status Filter by status
    # @return [GetIdentityVerifications200Response]
    def get_identity_verifications(opts = {})
      data, _status_code, _headers = get_identity_verifications_with_http_info(opts)
      data
    end

    # List Identity Verifications
    # Returns the list of all Identity Verifications within your organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after After cursor (pagination)
    # @option opts [Integer] :limit The limit of items count to retrieve. (default to 100)
    # @option opts [String] :status Filter by status
    # @return [Array<(GetIdentityVerifications200Response, Integer, Hash)>] GetIdentityVerifications200Response data, response status code and response headers
    def get_identity_verifications_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityVerificationApi.get_identity_verifications ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling IdentityVerificationApi.get_identity_verifications, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling IdentityVerificationApi.get_identity_verifications, must be greater than or equal to 1.'
      end

      allowable_values = ["pending", "approved", "declined", "inconclusive"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/video_identity_verifications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIdentityVerifications200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"IdentityVerificationApi.get_identity_verifications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityVerificationApi#get_identity_verifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an identity verification
    # Get the detailed results of an Identity Verification.
    # @param identity_verification_id [String] The Identity verification ID
    # @param [Hash] opts the optional parameters
    # @return [GetIdentityVerificationsIdentityVerificationId200Response]
    def get_identity_verifications_identity_verification_id(identity_verification_id, opts = {})
      data, _status_code, _headers = get_identity_verifications_identity_verification_id_with_http_info(identity_verification_id, opts)
      data
    end

    # Retrieve an identity verification
    # Get the detailed results of an Identity Verification.
    # @param identity_verification_id [String] The Identity verification ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetIdentityVerificationsIdentityVerificationId200Response, Integer, Hash)>] GetIdentityVerificationsIdentityVerificationId200Response data, response status code and response headers
    def get_identity_verifications_identity_verification_id_with_http_info(identity_verification_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityVerificationApi.get_identity_verifications_identity_verification_id ...'
      end
      # verify the required parameter 'identity_verification_id' is set
      if @api_client.config.client_side_validation && identity_verification_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_verification_id' when calling IdentityVerificationApi.get_identity_verifications_identity_verification_id"
      end
      # resource path
      local_var_path = '/video_identity_verifications/{identityVerificationId}'.sub('{' + 'identityVerificationId' + '}', CGI.escape(identity_verification_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetIdentityVerificationsIdentityVerificationId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"IdentityVerificationApi.get_identity_verifications_identity_verification_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityVerificationApi#get_identity_verifications_identity_verification_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate a new Identity Verification
    # Creates a new Identity Verification resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateVideoIdentityVerification] :create_video_identity_verification 
    # @return [VideoIdentityVerificationCreated]
    def post_identity_verifications(opts = {})
      data, _status_code, _headers = post_identity_verifications_with_http_info(opts)
      data
    end

    # Initiate a new Identity Verification
    # Creates a new Identity Verification resource.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateVideoIdentityVerification] :create_video_identity_verification 
    # @return [Array<(VideoIdentityVerificationCreated, Integer, Hash)>] VideoIdentityVerificationCreated data, response status code and response headers
    def post_identity_verifications_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityVerificationApi.post_identity_verifications ...'
      end
      # resource path
      local_var_path = '/video_identity_verifications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_video_identity_verification'])

      # return_type
      return_type = opts[:debug_return_type] || 'VideoIdentityVerificationCreated'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"IdentityVerificationApi.post_identity_verifications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityVerificationApi#post_identity_verifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
