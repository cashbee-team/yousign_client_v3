=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

The version of the OpenAPI document: 3.0
Contact: contact@yousign.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module YousignClientV3
  class ConsumptionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get detailed addon consumption.
    # Retrieves detailed addon consumption for the current subscription period.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :addons A list of add-ons to filter the results on.
    # @return [GetConsumptionAddon200Response]
    def get_consumption_addon(opts = {})
      data, _status_code, _headers = get_consumption_addon_with_http_info(opts)
      data
    end

    # Get detailed addon consumption.
    # Retrieves detailed addon consumption for the current subscription period.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :addons A list of add-ons to filter the results on.
    # @return [Array<(GetConsumptionAddon200Response, Integer, Hash)>] GetConsumptionAddon200Response data, response status code and response headers
    def get_consumption_addon_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumptionApi.get_consumption_addon ...'
      end
      allowable_values = ["electronic_signature", "advanced_electronic_signature", "qualified_electronic_signature_identity_verification", "qualified_electronic_signature_saved_identity", "electronic_seal", "advanced_electronic_seal", "archiving"]
      if @api_client.config.client_side_validation && opts[:'addons'] && !opts[:'addons'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"addons\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/consumptions/addons'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'addons'] = @api_client.build_collection_param(opts[:'addons'], :multi) if !opts[:'addons'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetConsumptionAddon200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ConsumptionApi.get_consumption_addon",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumptionApi#get_consumption_addon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get detailed Consumption data
    # Returns the consumption of your organization over a specified period.
    # @param from [Date] The starting date for data retrieval.
    # @param to [Date] The end date for data retrieval. The &#x60;to&#x60; date must be later than the &#x60;from&#x60; date and within one year of the &#x60;from&#x60; date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after After cursor (pagination)
    # @option opts [Integer] :limit The limit of items count to retrieve. (default to 100)
    # @option opts [String] :breakdown_type Specifies how data is grouped. By default, it returns the total consumption for the entire organization. If set to &#x60;workspace&#x60;, the data will be grouped by Workspace. (default to 'organization')
    # @option opts [Array<String>] :workspace_ids A list of Workspace IDs to filter the results.
    # @return [GetConsumptionDetail200Response]
    def get_consumption_detail(from, to, opts = {})
      data, _status_code, _headers = get_consumption_detail_with_http_info(from, to, opts)
      data
    end

    # Get detailed Consumption data
    # Returns the consumption of your organization over a specified period.
    # @param from [Date] The starting date for data retrieval.
    # @param to [Date] The end date for data retrieval. The &#x60;to&#x60; date must be later than the &#x60;from&#x60; date and within one year of the &#x60;from&#x60; date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after After cursor (pagination)
    # @option opts [Integer] :limit The limit of items count to retrieve. (default to 100)
    # @option opts [String] :breakdown_type Specifies how data is grouped. By default, it returns the total consumption for the entire organization. If set to &#x60;workspace&#x60;, the data will be grouped by Workspace. (default to 'organization')
    # @option opts [Array<String>] :workspace_ids A list of Workspace IDs to filter the results.
    # @return [Array<(GetConsumptionDetail200Response, Integer, Hash)>] GetConsumptionDetail200Response data, response status code and response headers
    def get_consumption_detail_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumptionApi.get_consumption_detail ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ConsumptionApi.get_consumption_detail"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling ConsumptionApi.get_consumption_detail"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ConsumptionApi.get_consumption_detail, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ConsumptionApi.get_consumption_detail, must be greater than or equal to 1.'
      end

      allowable_values = ["organization", "workspace"]
      if @api_client.config.client_side_validation && opts[:'breakdown_type'] && !allowable_values.include?(opts[:'breakdown_type'])
        fail ArgumentError, "invalid value for \"breakdown_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/consumptions/detail'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'breakdown_type'] = opts[:'breakdown_type'] if !opts[:'breakdown_type'].nil?
      query_params[:'workspace_ids'] = @api_client.build_collection_param(opts[:'workspace_ids'], :multi) if !opts[:'workspace_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetConsumptionDetail200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ConsumptionApi.get_consumption_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumptionApi#get_consumption_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Consumptions
    # Get signatures Consumption by source
    # @param from [Date] The \&quot;from\&quot; date must not be more than 1 year in the past
    # @param to [Date] The \&quot;to\&quot; date must be more recent than the \&quot;from\&quot; date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authentication_key The API authentication key to use to retrieve the data
    # @return [Consumption]
    def get_consumptions(from, to, opts = {})
      data, _status_code, _headers = get_consumptions_with_http_info(from, to, opts)
      data
    end

    # Get Consumptions
    # Get signatures Consumption by source
    # @param from [Date] The \&quot;from\&quot; date must not be more than 1 year in the past
    # @param to [Date] The \&quot;to\&quot; date must be more recent than the \&quot;from\&quot; date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authentication_key The API authentication key to use to retrieve the data
    # @return [Array<(Consumption, Integer, Hash)>] Consumption data, response status code and response headers
    def get_consumptions_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumptionApi.get_consumptions ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ConsumptionApi.get_consumptions"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling ConsumptionApi.get_consumptions"
      end
      # resource path
      local_var_path = '/consumptions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'authentication_key'] = opts[:'authentication_key'] if !opts[:'authentication_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Consumption'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ConsumptionApi.get_consumptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumptionApi#get_consumptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export Consumption data
    # Get a binary .csv file containing all the Consumption data of the underlying signatures
    # @param from [Date] The \&quot;from\&quot; date must not be more than 1 year in the past
    # @param to [Date] The \&quot;to\&quot; date must be more recent than the \&quot;from\&quot; date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authentication_key The API authentication key to use to retrieve the data
    # @return [String]
    def get_consumptions_export(from, to, opts = {})
      data, _status_code, _headers = get_consumptions_export_with_http_info(from, to, opts)
      data
    end

    # Export Consumption data
    # Get a binary .csv file containing all the Consumption data of the underlying signatures
    # @param from [Date] The \&quot;from\&quot; date must not be more than 1 year in the past
    # @param to [Date] The \&quot;to\&quot; date must be more recent than the \&quot;from\&quot; date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authentication_key The API authentication key to use to retrieve the data
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_consumptions_export_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumptionApi.get_consumptions_export ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ConsumptionApi.get_consumptions_export"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling ConsumptionApi.get_consumptions_export"
      end
      # resource path
      local_var_path = '/consumptions/export'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'authentication_key'] = opts[:'authentication_key'] if !opts[:'authentication_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv', 'application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ConsumptionApi.get_consumptions_export",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumptionApi#get_consumptions_export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
