=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

The version of the OpenAPI document: 3.0
Contact: contact@yousign.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module YousignClientV3
  class UserInvitationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List User Invitations
    # Returns the list of all the Users Invitations within your Organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after After cursor (pagination)
    # @option opts [Integer] :limit The limit of items count to retrieve. (default to 100)
    # @option opts [String] :email A given e-mail address to filter on.
    # @return [GetInvitations200Response]
    def get_invitations(opts = {})
      data, _status_code, _headers = get_invitations_with_http_info(opts)
      data
    end

    # List User Invitations
    # Returns the list of all the Users Invitations within your Organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after After cursor (pagination)
    # @option opts [Integer] :limit The limit of items count to retrieve. (default to 100)
    # @option opts [String] :email A given e-mail address to filter on.
    # @return [Array<(GetInvitations200Response, Integer, Hash)>] GetInvitations200Response data, response status code and response headers
    def get_invitations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserInvitationApi.get_invitations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling UserInvitationApi.get_invitations, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling UserInvitationApi.get_invitations, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'email'].nil? && opts[:'email'].to_s.length > 100
        fail ArgumentError, 'invalid value for "opts[:"email"]" when calling UserInvitationApi.get_invitations, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'email'].nil? && opts[:'email'].to_s.length < 6
        fail ArgumentError, 'invalid value for "opts[:"email"]" when calling UserInvitationApi.get_invitations, the character length must be great than or equal to 6.'
      end

      # resource path
      local_var_path = '/users/invitations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetInvitations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserInvitationApi.get_invitations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserInvitationApi#get_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Invitation
    # Retrieves a given User Invitation.
    # @param invitation_id [String] Invitation Id
    # @param [Hash] opts the optional parameters
    # @return [UserInvitation]
    def get_users_invitation_invitation_id(invitation_id, opts = {})
      data, _status_code, _headers = get_users_invitation_invitation_id_with_http_info(invitation_id, opts)
      data
    end

    # Get an Invitation
    # Retrieves a given User Invitation.
    # @param invitation_id [String] Invitation Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserInvitation, Integer, Hash)>] UserInvitation data, response status code and response headers
    def get_users_invitation_invitation_id_with_http_info(invitation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserInvitationApi.get_users_invitation_invitation_id ...'
      end
      # verify the required parameter 'invitation_id' is set
      if @api_client.config.client_side_validation && invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling UserInvitationApi.get_users_invitation_invitation_id"
      end
      # resource path
      local_var_path = '/users/invitations/{invitationId}'.sub('{' + 'invitationId' + '}', CGI.escape(invitation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserInvitation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserInvitationApi.get_users_invitation_invitation_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserInvitationApi#get_users_invitation_invitation_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a User Invitation via the User
    # Retrieves the Invitation of a given User. The Invitation only exists when the User is in `invited` status.
    # @param user_id [String] User Id
    # @param [Hash] opts the optional parameters
    # @return [UserInvitation]
    def get_users_user_id_invitation(user_id, opts = {})
      data, _status_code, _headers = get_users_user_id_invitation_with_http_info(user_id, opts)
      data
    end

    # Get a User Invitation via the User
    # Retrieves the Invitation of a given User. The Invitation only exists when the User is in &#x60;invited&#x60; status.
    # @param user_id [String] User Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserInvitation, Integer, Hash)>] UserInvitation data, response status code and response headers
    def get_users_user_id_invitation_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserInvitationApi.get_users_user_id_invitation ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserInvitationApi.get_users_user_id_invitation"
      end
      # resource path
      local_var_path = '/users/{userId}/invitation'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserInvitation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UserInvitationApi.get_users_user_id_invitation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserInvitationApi#get_users_user_id_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
