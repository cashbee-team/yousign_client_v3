=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

The version of the OpenAPI document: 3.0
Contact: contact@yousign.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module YousignClientV3
  class MetadataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete the Signature Request Metadata
    # Deletes the Metadata of a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_signature_requests_signature_request_id_metadata(signature_request_id, opts = {})
      delete_signature_requests_signature_request_id_metadata_with_http_info(signature_request_id, opts)
      nil
    end

    # Delete the Signature Request Metadata
    # Deletes the Metadata of a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_signature_requests_signature_request_id_metadata_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.delete_signature_requests_signature_request_id_metadata ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling MetadataApi.delete_signature_requests_signature_request_id_metadata"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/metadata'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"MetadataApi.delete_signature_requests_signature_request_id_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#delete_signature_requests_signature_request_id_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the Signature Request Metadata
    # Retrieves the Metadata of a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [Metadata]
    def get_signature_requests_signature_request_id_metadata(signature_request_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_metadata_with_http_info(signature_request_id, opts)
      data
    end

    # Get the Signature Request Metadata
    # Retrieves the Metadata of a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Metadata, Integer, Hash)>] Metadata data, response status code and response headers
    def get_signature_requests_signature_request_id_metadata_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.get_signature_requests_signature_request_id_metadata ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling MetadataApi.get_signature_requests_signature_request_id_metadata"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/metadata'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Metadata'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"MetadataApi.get_signature_requests_signature_request_id_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#get_signature_requests_signature_request_id_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Attach Metadata to a Signature Request
    # Add Metadata to a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [Metadata] :metadata 
    # @return [Metadata]
    def post_signature_requests_signature_request_id_metadata(signature_request_id, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_metadata_with_http_info(signature_request_id, opts)
      data
    end

    # Attach Metadata to a Signature Request
    # Add Metadata to a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [Metadata] :metadata 
    # @return [Array<(Metadata, Integer, Hash)>] Metadata data, response status code and response headers
    def post_signature_requests_signature_request_id_metadata_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.post_signature_requests_signature_request_id_metadata ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling MetadataApi.post_signature_requests_signature_request_id_metadata"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/metadata'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'metadata'])

      # return_type
      return_type = opts[:debug_return_type] || 'Metadata'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"MetadataApi.post_signature_requests_signature_request_id_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#post_signature_requests_signature_request_id_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Metadata of a Signature Request
    # Updates the Metadata of a given Signature Request. Any parameters not provided are left unchanged.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [Metadata] :metadata 
    # @return [Metadata]
    def put_signature_requests_signature_request_id_metadata(signature_request_id, opts = {})
      data, _status_code, _headers = put_signature_requests_signature_request_id_metadata_with_http_info(signature_request_id, opts)
      data
    end

    # Update Metadata of a Signature Request
    # Updates the Metadata of a given Signature Request. Any parameters not provided are left unchanged.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [Metadata] :metadata 
    # @return [Array<(Metadata, Integer, Hash)>] Metadata data, response status code and response headers
    def put_signature_requests_signature_request_id_metadata_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.put_signature_requests_signature_request_id_metadata ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling MetadataApi.put_signature_requests_signature_request_id_metadata"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/metadata'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'metadata'])

      # return_type
      return_type = opts[:debug_return_type] || 'Metadata'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"MetadataApi.put_signature_requests_signature_request_id_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#put_signature_requests_signature_request_id_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
