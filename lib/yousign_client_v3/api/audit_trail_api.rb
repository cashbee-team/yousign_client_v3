=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

The version of the OpenAPI document: 3.0
Contact: contact@yousign.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module YousignClientV3
  class AuditTrailApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Download Signature Request Audit Trails
    # Download the PDF version of all the Audit Trails attached to a given Signature Request. Each Audit Trail is bound to a different Signer. Only possible when the Signature Request status is `done`.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :merge Download all Audit Trails merged as a single PDF file (default to false)
    # @return [File]
    def get_signature_requests_signature_request_id_audit_trails_download(signature_request_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_audit_trails_download_with_http_info(signature_request_id, opts)
      data
    end

    # Download Signature Request Audit Trails
    # Download the PDF version of all the Audit Trails attached to a given Signature Request. Each Audit Trail is bound to a different Signer. Only possible when the Signature Request status is &#x60;done&#x60;.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :merge Download all Audit Trails merged as a single PDF file (default to false)
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_signature_requests_signature_request_id_audit_trails_download_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuditTrailApi.get_signature_requests_signature_request_id_audit_trails_download ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling AuditTrailApi.get_signature_requests_signature_request_id_audit_trails_download"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/audit_trails/download'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'merge'] = opts[:'merge'] if !opts[:'merge'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip, application/pdf', 'application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AuditTrailApi.get_signature_requests_signature_request_id_audit_trails_download",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuditTrailApi#get_signature_requests_signature_request_id_audit_trails_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Signer Audit Trail
    # Retrieves the JSON version of the Audit Trail attached to a given Signer. Only possible when Signer status is `signed`.
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [SignerAuditTrail]
    def get_signature_requests_signature_request_id_signers_signer_id_audit_trails(signature_request_id, signer_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_signers_signer_id_audit_trails_with_http_info(signature_request_id, signer_id, opts)
      data
    end

    # Get Signer Audit Trail
    # Retrieves the JSON version of the Audit Trail attached to a given Signer. Only possible when Signer status is &#x60;signed&#x60;.
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignerAuditTrail, Integer, Hash)>] SignerAuditTrail data, response status code and response headers
    def get_signature_requests_signature_request_id_signers_signer_id_audit_trails_with_http_info(signature_request_id, signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuditTrailApi.get_signature_requests_signature_request_id_signers_signer_id_audit_trails ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling AuditTrailApi.get_signature_requests_signature_request_id_signers_signer_id_audit_trails"
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling AuditTrailApi.get_signature_requests_signature_request_id_signers_signer_id_audit_trails"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}/audit_trails'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'signerId' + '}', CGI.escape(signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SignerAuditTrail'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AuditTrailApi.get_signature_requests_signature_request_id_signers_signer_id_audit_trails",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuditTrailApi#get_signature_requests_signature_request_id_signers_signer_id_audit_trails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Audit Trail PDF
    # Download the PDF version of the Audit Trail attached to a given Signer. Only possible when Signer status is `signed`.
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_signers_signer_id_audit_trails_download(signature_request_id, signer_id, opts = {})
      data, _status_code, _headers = get_signers_signer_id_audit_trails_download_with_http_info(signature_request_id, signer_id, opts)
      data
    end

    # Download Audit Trail PDF
    # Download the PDF version of the Audit Trail attached to a given Signer. Only possible when Signer status is &#x60;signed&#x60;.
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_signers_signer_id_audit_trails_download_with_http_info(signature_request_id, signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuditTrailApi.get_signers_signer_id_audit_trails_download ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling AuditTrailApi.get_signers_signer_id_audit_trails_download"
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling AuditTrailApi.get_signers_signer_id_audit_trails_download"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}/audit_trails/download'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'signerId' + '}', CGI.escape(signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf', 'application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AuditTrailApi.get_signers_signer_id_audit_trails_download",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuditTrailApi#get_signers_signer_id_audit_trails_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
