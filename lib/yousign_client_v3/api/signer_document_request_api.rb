=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

The version of the OpenAPI document: 3.0
Contact: contact@yousign.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module YousignClientV3
  class SignerDocumentRequestApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a Signer Document Request
    # Delete a Signer Document Request from signature request. This action is only permitted when the Signature Request is a draft.
    # @param signature_request_id [String] Signature Request Id
    # @param document_request_id [String] Signer Document Request Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_signature_requests_signature_request_id_document_requests_document_request_id(signature_request_id, document_request_id, opts = {})
      delete_signature_requests_signature_request_id_document_requests_document_request_id_with_http_info(signature_request_id, document_request_id, opts)
      nil
    end

    # Delete a Signer Document Request
    # Delete a Signer Document Request from signature request. This action is only permitted when the Signature Request is a draft.
    # @param signature_request_id [String] Signature Request Id
    # @param document_request_id [String] Signer Document Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_signature_requests_signature_request_id_document_requests_document_request_id_with_http_info(signature_request_id, document_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerDocumentRequestApi.delete_signature_requests_signature_request_id_document_requests_document_request_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerDocumentRequestApi.delete_signature_requests_signature_request_id_document_requests_document_request_id"
      end
      # verify the required parameter 'document_request_id' is set
      if @api_client.config.client_side_validation && document_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_request_id' when calling SignerDocumentRequestApi.delete_signature_requests_signature_request_id_document_requests_document_request_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/document_requests/{documentRequestId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'documentRequestId' + '}', CGI.escape(document_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerDocumentRequestApi.delete_signature_requests_signature_request_id_document_requests_document_request_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerDocumentRequestApi#delete_signature_requests_signature_request_id_document_requests_document_request_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a Signer to a given Signer Document Request
    # Remove a Signer to a given Signer Document Request. This action is only permitted when the Signature Request is a draft.
    # @param signature_request_id [String] Signature Request Id
    # @param document_request_id [String] Signer Document Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id(signature_request_id, document_request_id, signer_id, opts = {})
      delete_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id_with_http_info(signature_request_id, document_request_id, signer_id, opts)
      nil
    end

    # Remove a Signer to a given Signer Document Request
    # Remove a Signer to a given Signer Document Request. This action is only permitted when the Signature Request is a draft.
    # @param signature_request_id [String] Signature Request Id
    # @param document_request_id [String] Signer Document Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id_with_http_info(signature_request_id, document_request_id, signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerDocumentRequestApi.delete_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerDocumentRequestApi.delete_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id"
      end
      # verify the required parameter 'document_request_id' is set
      if @api_client.config.client_side_validation && document_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_request_id' when calling SignerDocumentRequestApi.delete_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id"
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerDocumentRequestApi.delete_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/document_requests/{documentRequestId}/signers/{signerId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'documentRequestId' + '}', CGI.escape(document_request_id.to_s)).sub('{' + 'signerId' + '}', CGI.escape(signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerDocumentRequestApi.delete_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerDocumentRequestApi#delete_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the Documents uploaded by a Signer
    # Deletes all documents uploaded by a given Signer for a specific Signature Request. Deletion is only possible when Signer status is `signed`. 
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_signature_requests_signature_request_id_signers_signer_id_documents(signature_request_id, signer_id, opts = {})
      delete_signature_requests_signature_request_id_signers_signer_id_documents_with_http_info(signature_request_id, signer_id, opts)
      nil
    end

    # Delete the Documents uploaded by a Signer
    # Deletes all documents uploaded by a given Signer for a specific Signature Request. Deletion is only possible when Signer status is &#x60;signed&#x60;. 
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_signature_requests_signature_request_id_signers_signer_id_documents_with_http_info(signature_request_id, signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerDocumentRequestApi.delete_signature_requests_signature_request_id_signers_signer_id_documents ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerDocumentRequestApi.delete_signature_requests_signature_request_id_signers_signer_id_documents"
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerDocumentRequestApi.delete_signature_requests_signature_request_id_signers_signer_id_documents"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}/documents'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'signerId' + '}', CGI.escape(signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerDocumentRequestApi.delete_signature_requests_signature_request_id_signers_signer_id_documents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerDocumentRequestApi#delete_signature_requests_signature_request_id_signers_signer_id_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Signer Document Requests of the Signature Request
    # Returns a list of Signer Document Requests for a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [GetSignatureRequestsSignatureRequestIdSignerDocumentRequests200Response]
    def get_signature_requests_signature_request_id_signer_document_requests(signature_request_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_signer_document_requests_with_http_info(signature_request_id, opts)
      data
    end

    # List Signer Document Requests of the Signature Request
    # Returns a list of Signer Document Requests for a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSignatureRequestsSignatureRequestIdSignerDocumentRequests200Response, Integer, Hash)>] GetSignatureRequestsSignatureRequestIdSignerDocumentRequests200Response data, response status code and response headers
    def get_signature_requests_signature_request_id_signer_document_requests_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerDocumentRequestApi.get_signature_requests_signature_request_id_signer_document_requests ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerDocumentRequestApi.get_signature_requests_signature_request_id_signer_document_requests"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/document_requests'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSignatureRequestsSignatureRequestIdSignerDocumentRequests200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerDocumentRequestApi.get_signature_requests_signature_request_id_signer_document_requests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerDocumentRequestApi#get_signature_requests_signature_request_id_signer_document_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the Signer Documents of a Signer
    # Returns a list of Documents uploaded by a given Signer. Only possible when Signer status is `signed`. 
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [GetSignatureRequestsSignatureRequestIdSignersSignerIdDocuments200Response]
    def get_signature_requests_signature_request_id_signers_signer_id_documents(signature_request_id, signer_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_signers_signer_id_documents_with_http_info(signature_request_id, signer_id, opts)
      data
    end

    # List the Signer Documents of a Signer
    # Returns a list of Documents uploaded by a given Signer. Only possible when Signer status is &#x60;signed&#x60;. 
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSignatureRequestsSignatureRequestIdSignersSignerIdDocuments200Response, Integer, Hash)>] GetSignatureRequestsSignatureRequestIdSignersSignerIdDocuments200Response data, response status code and response headers
    def get_signature_requests_signature_request_id_signers_signer_id_documents_with_http_info(signature_request_id, signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerDocumentRequestApi.get_signature_requests_signature_request_id_signers_signer_id_documents ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerDocumentRequestApi.get_signature_requests_signature_request_id_signers_signer_id_documents"
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerDocumentRequestApi.get_signature_requests_signature_request_id_signers_signer_id_documents"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}/documents'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'signerId' + '}', CGI.escape(signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSignatureRequestsSignatureRequestIdSignersSignerIdDocuments200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerDocumentRequestApi.get_signature_requests_signature_request_id_signers_signer_id_documents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerDocumentRequestApi#get_signature_requests_signature_request_id_signers_signer_id_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download a Signer Document
    # Downloads a Document uploaded by a given Signer. Only possible when Signer status is `signed`. 
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param signer_document_id [String] Signer Document Id
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_signature_requests_signature_request_id_signers_signer_id_documents_signer_document_id(signature_request_id, signer_id, signer_document_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_signers_signer_id_documents_signer_document_id_with_http_info(signature_request_id, signer_id, signer_document_id, opts)
      data
    end

    # Download a Signer Document
    # Downloads a Document uploaded by a given Signer. Only possible when Signer status is &#x60;signed&#x60;. 
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param signer_document_id [String] Signer Document Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_signature_requests_signature_request_id_signers_signer_id_documents_signer_document_id_with_http_info(signature_request_id, signer_id, signer_document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerDocumentRequestApi.get_signature_requests_signature_request_id_signers_signer_id_documents_signer_document_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerDocumentRequestApi.get_signature_requests_signature_request_id_signers_signer_id_documents_signer_document_id"
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerDocumentRequestApi.get_signature_requests_signature_request_id_signers_signer_id_documents_signer_document_id"
      end
      # verify the required parameter 'signer_document_id' is set
      if @api_client.config.client_side_validation && signer_document_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_document_id' when calling SignerDocumentRequestApi.get_signature_requests_signature_request_id_signers_signer_id_documents_signer_document_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}/documents/{signerDocumentId}/download'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'signerId' + '}', CGI.escape(signer_id.to_s)).sub('{' + 'signerDocumentId' + '}', CGI.escape(signer_document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf', 'application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerDocumentRequestApi.get_signature_requests_signature_request_id_signers_signer_id_documents_signer_document_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerDocumentRequestApi#get_signature_requests_signature_request_id_signers_signer_id_documents_signer_document_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Signer Document Request to a Signature Request
    # Adds a Signer Document Request to a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSignerDocumentRequest] :create_signer_document_request 
    # @return [SignerDocumentRequest]
    def post_signature_requests_signature_request_id_document_requests(signature_request_id, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_document_requests_with_http_info(signature_request_id, opts)
      data
    end

    # Add Signer Document Request to a Signature Request
    # Adds a Signer Document Request to a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSignerDocumentRequest] :create_signer_document_request 
    # @return [Array<(SignerDocumentRequest, Integer, Hash)>] SignerDocumentRequest data, response status code and response headers
    def post_signature_requests_signature_request_id_document_requests_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerDocumentRequestApi.post_signature_requests_signature_request_id_document_requests ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerDocumentRequestApi.post_signature_requests_signature_request_id_document_requests"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/document_requests'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_signer_document_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SignerDocumentRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerDocumentRequestApi.post_signature_requests_signature_request_id_document_requests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerDocumentRequestApi#post_signature_requests_signature_request_id_document_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds a Signer to a given Signer Document Request
    # Adds a Signer to a given Signer Document Request. This action is only permitted when the Signature Request is a draft.
    # @param signature_request_id [String] Signature Request Id
    # @param document_request_id [String] Signer Document Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [SignerDocumentRequest]
    def put_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id(signature_request_id, document_request_id, signer_id, opts = {})
      data, _status_code, _headers = put_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id_with_http_info(signature_request_id, document_request_id, signer_id, opts)
      data
    end

    # Adds a Signer to a given Signer Document Request
    # Adds a Signer to a given Signer Document Request. This action is only permitted when the Signature Request is a draft.
    # @param signature_request_id [String] Signature Request Id
    # @param document_request_id [String] Signer Document Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignerDocumentRequest, Integer, Hash)>] SignerDocumentRequest data, response status code and response headers
    def put_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id_with_http_info(signature_request_id, document_request_id, signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerDocumentRequestApi.put_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerDocumentRequestApi.put_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id"
      end
      # verify the required parameter 'document_request_id' is set
      if @api_client.config.client_side_validation && document_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_request_id' when calling SignerDocumentRequestApi.put_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id"
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerDocumentRequestApi.put_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/document_requests/{documentRequestId}/signers/{signerId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'documentRequestId' + '}', CGI.escape(document_request_id.to_s)).sub('{' + 'signerId' + '}', CGI.escape(signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SignerDocumentRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerDocumentRequestApi.put_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerDocumentRequestApi#put_signature_requests_signature_request_id_document_requests_document_request_id_signers_signer_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
