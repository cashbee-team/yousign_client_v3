=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

The version of the OpenAPI document: 3.0
Contact: contact@yousign.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module YousignClientV3
  class SignerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a Signer
    # Deletes a given Signer from a Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_signature_requests_signature_request_id_signers_signer_id(signature_request_id, signer_id, opts = {})
      delete_signature_requests_signature_request_id_signers_signer_id_with_http_info(signature_request_id, signer_id, opts)
      nil
    end

    # Delete a Signer
    # Deletes a given Signer from a Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_signature_requests_signature_request_id_signers_signer_id_with_http_info(signature_request_id, signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerApi.delete_signature_requests_signature_request_id_signers_signer_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerApi.delete_signature_requests_signature_request_id_signers_signer_id"
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerApi.delete_signature_requests_signature_request_id_signers_signer_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'signerId' + '}', CGI.escape(signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerApi.delete_signature_requests_signature_request_id_signers_signer_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerApi#delete_signature_requests_signature_request_id_signers_signer_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Signature Request's Signers
    # Returns a list of Signers for a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<Signer>]
    def get_signature_requests_signature_request_id_signers(signature_request_id, opts = {})
      data, _status_code, _headers = get_signature_requests_signature_request_id_signers_with_http_info(signature_request_id, opts)
      data
    end

    # List Signature Request&#39;s Signers
    # Returns a list of Signers for a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Signer>, Integer, Hash)>] Array<Signer> data, response status code and response headers
    def get_signature_requests_signature_request_id_signers_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerApi.get_signature_requests_signature_request_id_signers ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerApi.get_signature_requests_signature_request_id_signers"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Signer>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerApi.get_signature_requests_signature_request_id_signers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerApi#get_signature_requests_signature_request_id_signers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Signer
    # Retrieves a given Signer.
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [Signer]
    def get_signers_signers_id(signature_request_id, signer_id, opts = {})
      data, _status_code, _headers = get_signers_signers_id_with_http_info(signature_request_id, signer_id, opts)
      data
    end

    # Get a Signer
    # Retrieves a given Signer.
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Signer, Integer, Hash)>] Signer data, response status code and response headers
    def get_signers_signers_id_with_http_info(signature_request_id, signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerApi.get_signers_signers_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerApi.get_signers_signers_id"
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerApi.get_signers_signers_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'signerId' + '}', CGI.escape(signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Signer'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerApi.get_signers_signers_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerApi#get_signers_signers_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Signer
    # Updates a given Signer. Any parameters not provided are left unchanged. 
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSigner] :update_signer 
    # @return [Signer]
    def patch_signature_requests_signature_request_id_signers_signer_id(signature_request_id, signer_id, opts = {})
      data, _status_code, _headers = patch_signature_requests_signature_request_id_signers_signer_id_with_http_info(signature_request_id, signer_id, opts)
      data
    end

    # Update a Signer
    # Updates a given Signer. Any parameters not provided are left unchanged. 
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSigner] :update_signer 
    # @return [Array<(Signer, Integer, Hash)>] Signer data, response status code and response headers
    def patch_signature_requests_signature_request_id_signers_signer_id_with_http_info(signature_request_id, signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerApi.patch_signature_requests_signature_request_id_signers_signer_id ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerApi.patch_signature_requests_signature_request_id_signers_signer_id"
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerApi.patch_signature_requests_signature_request_id_signers_signer_id"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'signerId' + '}', CGI.escape(signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_signer'])

      # return_type
      return_type = opts[:debug_return_type] || 'Signer'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerApi.patch_signature_requests_signature_request_id_signers_signer_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerApi#patch_signature_requests_signature_request_id_signers_signer_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Signer
    # Adds a Signer to a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSigner] :create_signer 
    # @return [Signer]
    def post_signature_requests_signature_request_id_signers(signature_request_id, opts = {})
      data, _status_code, _headers = post_signature_requests_signature_request_id_signers_with_http_info(signature_request_id, opts)
      data
    end

    # Create a new Signer
    # Adds a Signer to a given Signature Request.
    # @param signature_request_id [String] Signature Request Id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSigner] :create_signer 
    # @return [Array<(Signer, Integer, Hash)>] Signer data, response status code and response headers
    def post_signature_requests_signature_request_id_signers_with_http_info(signature_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerApi.post_signature_requests_signature_request_id_signers ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerApi.post_signature_requests_signature_request_id_signers"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_signer'])

      # return_type
      return_type = opts[:debug_return_type] || 'Signer'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerApi.post_signature_requests_signature_request_id_signers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerApi#post_signature_requests_signature_request_id_signers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a One-Time Password (OTP) to a Signer
    # Send a One-Time Password (OTP) to a given Signer. Use this endpoint only if you use your own signing flow.
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_signature_requests_signature_request_id_signers_signer_id_send_otp(signature_request_id, signer_id, opts = {})
      post_signature_requests_signature_request_id_signers_signer_id_send_otp_with_http_info(signature_request_id, signer_id, opts)
      nil
    end

    # Send a One-Time Password (OTP) to a Signer
    # Send a One-Time Password (OTP) to a given Signer. Use this endpoint only if you use your own signing flow.
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_signature_requests_signature_request_id_signers_signer_id_send_otp_with_http_info(signature_request_id, signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerApi.post_signature_requests_signature_request_id_signers_signer_id_send_otp ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerApi.post_signature_requests_signature_request_id_signers_signer_id_send_otp"
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerApi.post_signature_requests_signature_request_id_signers_signer_id_send_otp"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}/send_otp'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'signerId' + '}', CGI.escape(signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerApi.post_signature_requests_signature_request_id_signers_signer_id_send_otp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerApi#post_signature_requests_signature_request_id_signers_signer_id_send_otp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send manual reminder to a Signer
    # Sends a reminder to a given signer to complete their Signature Request. Only possible when the Signature Request status is `ongoing` and the Signer status is `notified`. 
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_signature_requests_signature_request_id_signers_signer_id_send_reminder(signature_request_id, signer_id, opts = {})
      post_signature_requests_signature_request_id_signers_signer_id_send_reminder_with_http_info(signature_request_id, signer_id, opts)
      nil
    end

    # Send manual reminder to a Signer
    # Sends a reminder to a given signer to complete their Signature Request. Only possible when the Signature Request status is &#x60;ongoing&#x60; and the Signer status is &#x60;notified&#x60;. 
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_signature_requests_signature_request_id_signers_signer_id_send_reminder_with_http_info(signature_request_id, signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerApi.post_signature_requests_signature_request_id_signers_signer_id_send_reminder ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerApi.post_signature_requests_signature_request_id_signers_signer_id_send_reminder"
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerApi.post_signature_requests_signature_request_id_signers_signer_id_send_reminder"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}/send_reminder'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'signerId' + '}', CGI.escape(signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerApi.post_signature_requests_signature_request_id_signers_signer_id_send_reminder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerApi#post_signature_requests_signature_request_id_signers_signer_id_send_reminder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sign a Signature Request
    # Sign a Signature Request on behalf of a given Signer.
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @option opts [SignerSign] :signer_sign 
    # @return [nil]
    def post_signature_requests_signature_request_id_signers_signer_id_sign(signature_request_id, signer_id, opts = {})
      post_signature_requests_signature_request_id_signers_signer_id_sign_with_http_info(signature_request_id, signer_id, opts)
      nil
    end

    # Sign a Signature Request
    # Sign a Signature Request on behalf of a given Signer.
    # @param signature_request_id [String] Signature Request Id
    # @param signer_id [String] Signer Id
    # @param [Hash] opts the optional parameters
    # @option opts [SignerSign] :signer_sign 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_signature_requests_signature_request_id_signers_signer_id_sign_with_http_info(signature_request_id, signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SignerApi.post_signature_requests_signature_request_id_signers_signer_id_sign ...'
      end
      # verify the required parameter 'signature_request_id' is set
      if @api_client.config.client_side_validation && signature_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_request_id' when calling SignerApi.post_signature_requests_signature_request_id_signers_signer_id_sign"
      end
      # verify the required parameter 'signer_id' is set
      if @api_client.config.client_side_validation && signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'signer_id' when calling SignerApi.post_signature_requests_signature_request_id_signers_signer_id_sign"
      end
      # resource path
      local_var_path = '/signature_requests/{signatureRequestId}/signers/{signerId}/sign'.sub('{' + 'signatureRequestId' + '}', CGI.escape(signature_request_id.to_s)).sub('{' + 'signerId' + '}', CGI.escape(signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'signer_sign'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SignerApi.post_signature_requests_signature_request_id_signers_signer_id_sign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignerApi#post_signature_requests_signature_request_id_signers_signer_id_sign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
