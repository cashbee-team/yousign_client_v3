=begin
#Public Api v3

#Build the best experience of digital signature through your own platform. Increase your conversion rates, leverage your data and reduce your costs with Yousign API.

The version of the OpenAPI document: 3.0
Contact: contact@yousign.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module YousignClientV3
  class SignatureRequest
    attr_accessor :id

    attr_accessor :status

    attr_accessor :name

    attr_accessor :delivery_mode

    attr_accessor :created_at

    # Enable an ordered workflow, each signer will be requested to sign in a sequential order
    attr_accessor :ordered_signers

    attr_accessor :reminder_settings

    # Time zone of the dates and times displayed in emails, the Signature Request expiration date, and the PDF Audit Trail. Format: tz database. Default is set to Europe/Paris.
    attr_accessor :timezone

    attr_accessor :email_custom_note

    attr_accessor :expiration_date

    attr_accessor :source

    attr_accessor :signers

    attr_accessor :approvers

    # Labels associated to the Signature Request
    attr_accessor :labels

    attr_accessor :documents

    attr_accessor :sender

    attr_accessor :external_id

    attr_accessor :branding_id

    attr_accessor :custom_experience_id

    attr_accessor :signers_allowed_to_decline

    attr_accessor :workspace_id

    attr_accessor :audit_trail_locale

    attr_accessor :email_notification

    attr_accessor :bulk_send_batch_id

    attr_accessor :decline_information

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'status' => :'status',
        :'name' => :'name',
        :'delivery_mode' => :'delivery_mode',
        :'created_at' => :'created_at',
        :'ordered_signers' => :'ordered_signers',
        :'reminder_settings' => :'reminder_settings',
        :'timezone' => :'timezone',
        :'email_custom_note' => :'email_custom_note',
        :'expiration_date' => :'expiration_date',
        :'source' => :'source',
        :'signers' => :'signers',
        :'approvers' => :'approvers',
        :'labels' => :'labels',
        :'documents' => :'documents',
        :'sender' => :'sender',
        :'external_id' => :'external_id',
        :'branding_id' => :'branding_id',
        :'custom_experience_id' => :'custom_experience_id',
        :'signers_allowed_to_decline' => :'signers_allowed_to_decline',
        :'workspace_id' => :'workspace_id',
        :'audit_trail_locale' => :'audit_trail_locale',
        :'email_notification' => :'email_notification',
        :'bulk_send_batch_id' => :'bulk_send_batch_id',
        :'decline_information' => :'decline_information'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'status' => :'SignatureRequestStatus',
        :'name' => :'String',
        :'delivery_mode' => :'String',
        :'created_at' => :'Time',
        :'ordered_signers' => :'Boolean',
        :'reminder_settings' => :'SignatureRequestInListReminderSettings',
        :'timezone' => :'String',
        :'email_custom_note' => :'String',
        :'expiration_date' => :'Time',
        :'source' => :'String',
        :'signers' => :'Array<SignatureRequestInListSignersInner>',
        :'approvers' => :'Array<SignatureRequestInListApproversInner>',
        :'labels' => :'Array<SignatureRequestInListLabelsInner>',
        :'documents' => :'Array<SignatureRequestInListDocumentsInner>',
        :'sender' => :'SignatureRequestInListSender',
        :'external_id' => :'String',
        :'branding_id' => :'String',
        :'custom_experience_id' => :'String',
        :'signers_allowed_to_decline' => :'Boolean',
        :'workspace_id' => :'String',
        :'audit_trail_locale' => :'AuditTrailLocale',
        :'email_notification' => :'SignatureRequestEmailNotification',
        :'bulk_send_batch_id' => :'String',
        :'decline_information' => :'SignatureRequestDeclineInformation'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'reminder_settings',
        :'email_custom_note',
        :'sender',
        :'external_id',
        :'branding_id',
        :'custom_experience_id',
        :'bulk_send_batch_id',
        :'decline_information'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `YousignClientV3::SignatureRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `YousignClientV3::SignatureRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'delivery_mode')
        self.delivery_mode = attributes[:'delivery_mode']
      else
        self.delivery_mode = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'ordered_signers')
        self.ordered_signers = attributes[:'ordered_signers']
      else
        self.ordered_signers = nil
      end

      if attributes.key?(:'reminder_settings')
        self.reminder_settings = attributes[:'reminder_settings']
      else
        self.reminder_settings = nil
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      else
        self.timezone = 'Europe/Paris'
      end

      if attributes.key?(:'email_custom_note')
        self.email_custom_note = attributes[:'email_custom_note']
      else
        self.email_custom_note = nil
      end

      if attributes.key?(:'expiration_date')
        self.expiration_date = attributes[:'expiration_date']
      else
        self.expiration_date = nil
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      else
        self.source = nil
      end

      if attributes.key?(:'signers')
        if (value = attributes[:'signers']).is_a?(Array)
          self.signers = value
        end
      else
        self.signers = nil
      end

      if attributes.key?(:'approvers')
        if (value = attributes[:'approvers']).is_a?(Array)
          self.approvers = value
        end
      end

      if attributes.key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Array)
          self.labels = value
        end
      end

      if attributes.key?(:'documents')
        if (value = attributes[:'documents']).is_a?(Array)
          self.documents = value
        end
      else
        self.documents = nil
      end

      if attributes.key?(:'sender')
        self.sender = attributes[:'sender']
      else
        self.sender = nil
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      else
        self.external_id = nil
      end

      if attributes.key?(:'branding_id')
        self.branding_id = attributes[:'branding_id']
      else
        self.branding_id = nil
      end

      if attributes.key?(:'custom_experience_id')
        self.custom_experience_id = attributes[:'custom_experience_id']
      else
        self.custom_experience_id = nil
      end

      if attributes.key?(:'signers_allowed_to_decline')
        self.signers_allowed_to_decline = attributes[:'signers_allowed_to_decline']
      else
        self.signers_allowed_to_decline = nil
      end

      if attributes.key?(:'workspace_id')
        self.workspace_id = attributes[:'workspace_id']
      end

      if attributes.key?(:'audit_trail_locale')
        self.audit_trail_locale = attributes[:'audit_trail_locale']
      else
        self.audit_trail_locale = nil
      end

      if attributes.key?(:'email_notification')
        self.email_notification = attributes[:'email_notification']
      else
        self.email_notification = nil
      end

      if attributes.key?(:'bulk_send_batch_id')
        self.bulk_send_batch_id = attributes[:'bulk_send_batch_id']
      else
        self.bulk_send_batch_id = nil
      end

      if attributes.key?(:'decline_information')
        self.decline_information = attributes[:'decline_information']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @id.to_s.length < 1
        invalid_properties.push('invalid value for "id", the character length must be great than or equal to 1.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 128
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 128.')
      end

      if @name.to_s.length < 1
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
      end

      if @delivery_mode.nil?
        invalid_properties.push('invalid value for "delivery_mode", delivery_mode cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @created_at.to_s.length < 1
        invalid_properties.push('invalid value for "created_at", the character length must be great than or equal to 1.')
      end

      if @ordered_signers.nil?
        invalid_properties.push('invalid value for "ordered_signers", ordered_signers cannot be nil.')
      end

      if @timezone.nil?
        invalid_properties.push('invalid value for "timezone", timezone cannot be nil.')
      end

      if @email_custom_note.to_s.length > 500
        invalid_properties.push('invalid value for "email_custom_note", the character length must be smaller than or equal to 500.')
      end

      if @expiration_date.nil?
        invalid_properties.push('invalid value for "expiration_date", expiration_date cannot be nil.')
      end

      if @source.nil?
        invalid_properties.push('invalid value for "source", source cannot be nil.')
      end

      if @signers.nil?
        invalid_properties.push('invalid value for "signers", signers cannot be nil.')
      end

      if @documents.nil?
        invalid_properties.push('invalid value for "documents", documents cannot be nil.')
      end

      if @signers_allowed_to_decline.nil?
        invalid_properties.push('invalid value for "signers_allowed_to_decline", signers_allowed_to_decline cannot be nil.')
      end

      if @audit_trail_locale.nil?
        invalid_properties.push('invalid value for "audit_trail_locale", audit_trail_locale cannot be nil.')
      end

      if @email_notification.nil?
        invalid_properties.push('invalid value for "email_notification", email_notification cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @id.to_s.length < 1
      return false if @status.nil?
      return false if @name.nil?
      return false if @name.to_s.length > 128
      return false if @name.to_s.length < 1
      return false if @delivery_mode.nil?
      delivery_mode_validator = EnumAttributeValidator.new('String', ["email", "none"])
      return false unless delivery_mode_validator.valid?(@delivery_mode)
      return false if @created_at.nil?
      return false if @created_at.to_s.length < 1
      return false if @ordered_signers.nil?
      return false if @timezone.nil?
      return false if @email_custom_note.to_s.length > 500
      return false if @expiration_date.nil?
      return false if @source.nil?
      source_validator = EnumAttributeValidator.new('String', ["app", "public_api", "connector_hubspot_api", "connector_salesforce_api", "connector_google_api", "connector_zapier_api"])
      return false unless source_validator.valid?(@source)
      return false if @signers.nil?
      return false if @documents.nil?
      return false if @signers_allowed_to_decline.nil?
      return false if @audit_trail_locale.nil?
      return false if @email_notification.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      if id.to_s.length < 1
        fail ArgumentError, 'invalid value for "id", the character length must be great than or equal to 1.'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 128
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 128.'
      end

      if name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] delivery_mode Object to be assigned
    def delivery_mode=(delivery_mode)
      validator = EnumAttributeValidator.new('String', ["email", "none"])
      unless validator.valid?(delivery_mode)
        fail ArgumentError, "invalid value for \"delivery_mode\", must be one of #{validator.allowable_values}."
      end
      @delivery_mode = delivery_mode
    end

    # Custom attribute writer method with validation
    # @param [Object] created_at Value to be assigned
    def created_at=(created_at)
      if created_at.nil?
        fail ArgumentError, 'created_at cannot be nil'
      end

      if created_at.to_s.length < 1
        fail ArgumentError, 'invalid value for "created_at", the character length must be great than or equal to 1.'
      end

      @created_at = created_at
    end

    # Custom attribute writer method with validation
    # @param [Object] email_custom_note Value to be assigned
    def email_custom_note=(email_custom_note)
      if !email_custom_note.nil? && email_custom_note.to_s.length > 500
        fail ArgumentError, 'invalid value for "email_custom_note", the character length must be smaller than or equal to 500.'
      end

      @email_custom_note = email_custom_note
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source Object to be assigned
    def source=(source)
      validator = EnumAttributeValidator.new('String', ["app", "public_api", "connector_hubspot_api", "connector_salesforce_api", "connector_google_api", "connector_zapier_api"])
      unless validator.valid?(source)
        fail ArgumentError, "invalid value for \"source\", must be one of #{validator.allowable_values}."
      end
      @source = source
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          status == o.status &&
          name == o.name &&
          delivery_mode == o.delivery_mode &&
          created_at == o.created_at &&
          ordered_signers == o.ordered_signers &&
          reminder_settings == o.reminder_settings &&
          timezone == o.timezone &&
          email_custom_note == o.email_custom_note &&
          expiration_date == o.expiration_date &&
          source == o.source &&
          signers == o.signers &&
          approvers == o.approvers &&
          labels == o.labels &&
          documents == o.documents &&
          sender == o.sender &&
          external_id == o.external_id &&
          branding_id == o.branding_id &&
          custom_experience_id == o.custom_experience_id &&
          signers_allowed_to_decline == o.signers_allowed_to_decline &&
          workspace_id == o.workspace_id &&
          audit_trail_locale == o.audit_trail_locale &&
          email_notification == o.email_notification &&
          bulk_send_batch_id == o.bulk_send_batch_id &&
          decline_information == o.decline_information
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, status, name, delivery_mode, created_at, ordered_signers, reminder_settings, timezone, email_custom_note, expiration_date, source, signers, approvers, labels, documents, sender, external_id, branding_id, custom_experience_id, signers_allowed_to_decline, workspace_id, audit_trail_locale, email_notification, bulk_send_batch_id, decline_information].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = YousignClientV3.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
